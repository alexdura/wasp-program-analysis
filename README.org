* WASP Program Analysis Project

** Getting Started
*** Build a Docker image that contains LLVM and Phasar
#+BEGIN_SRC
git clone git@github.com:alexdura/wasp-program-analysis.git

# we are importing Phasar and LLVM as submodules
git submodule update --init --recursive

# build the Docker image
docker build . -t wasp-pa

# enjoy!
docker run -it wasp-pa
#+END_SRC

**** Having persistent storage in the container
 To do that, we use ~docker-compose~. It is a script that reads a
 ~docker-compose.yaml~ file to find a specification, it will run your
 containers following that spec.

 You need to set some environment variables to your user id before
 running the container, otherwise the files that you have will be saved
 inside the mounted directory as owned by root.

 To start the container, write:
 #+BEGIN_SRC bash
 CURRENT_ID=$(id -u):$(id -g) docker-compose run wasp-pa-dev
 #+END_SRC

 This will start the container, like in the previous section, but the
 directory ~./src/~ on the host will be mounted in ~/mounted/src~
 inside the container.


*** Building locally
**** LLVM
    For this project, we need a debug version of LLVM.
    You may do as follows:
    #+BEGIN_SRC bash
    cd llvm
    mkdir llvm_build
    cd llvm_build
    #+END_SRC

    And then, there are two options:

    #+BEGIN_SRC bash
    cmake -G "Unix Makefiles" -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra;libcxx;libcxxabi;libunwind;lld;lldb;compiler-rt;lld;polly;debuginfo-tests;openmp;parallel-libs' -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_CXX1Y=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DBUILD_SHARED_LIBS=ON -DLLVM_BUILD_LLVM_DYLIB=ON ../llvm
    #+END_SRC

    is for setting up a build with makefiles and,

    #+BEGIN_SRC bash
    cmake -G "Ninja" -DLLVM_ENABLE_PROJECTS='clang;clang-tools-extra;libcxx;libcxxabi;libunwind;lld;lldb;compiler-rt;lld;polly;debuginfo-tests;openmp;parallel-libs' -DCMAKE_BUILD_TYPE=Debug -DLLVM_ENABLE_CXX1Y=ON -DLLVM_ENABLE_EH=ON -DLLVM_ENABLE_RTTI=ON -DBUILD_SHARED_LIBS=ON -DLLVM_BUILD_LLVM_DYLIB=ON ../llvm
    #+END_SRC

    For building with the ~ninja~ build tool. It is usually a bit faster.
*** Plugins

The =phasar_src= directory contains examples, we are particularly interested in the =plugins= examples.
