#+TITLE: Castcheck, checking types in gObject
#+AUTHOR: Noric Couderc, Alexandru Dura

* Getting started
  To start the analysis on the example file, you need to do:
  #+BEGIN_SRC bash
  make
  #+END_SRC
  The makefile builds and runs the analysis.
  
* Analysis
  The analysis should be divided into two phases.
  1. Finding the type hierarchy
  2. Checking for invalid type casts

** Finding the type hierarchy

** Checking for invalid type casts
   First, we need the header file:
   #+BEGIN_SRC c++ :tangle CastCheck.h

   #+END_SRC
   
   Then we need the actual code file:
   #+BEGIN_SRC c++ :tangle CastCheck.cxx
   #include "CastCheck.h"
   #+END_SRC
* Appendix

** Config file syntax
   For showing how to run an analysis, we will use our gObject simple example.

   #+BEGIN_SRC conf :tangle gobject-example.ll.conf
   module=../../test/gobject-example/gobject-example.ll
   data-flow-analysis=Plugin
   analysis-plugin=./CastCheck.so
   #+END_SRC
   
** Makefile
   Here is the content of the makefile, to build the plugin
   #+BEGIN_SRC makefile :tangle Makefile
GLIB_INSTALL_PREFIX ?= /usr/
LLVM_INSTALL_PREFIX ?= /home/noric/Dev/wasp-project-course/wasp-program-analysis/llvm/llvm_install/bin
CXX := clang++
CC := clang
CXX_FLAGS := -std=c++14
CXX_FLAGS += -Wall
CXX_FLAGS += -Wno-return-type-c-linkage
CXX_FLAGS += -O0
CXX_FLAGS += -fPIC
CXX_FLAGS += -shared
CXX_FLAGS += -g
INCLUDE_DIRS ?= -I/include/wise_enum/
LLVM_FLAGS := `$(LLVM_INSTALL_PREFIX)/llvm-config --cppflags`

IFDSPluginSrc := CastCheck.cxx
IFDSPlugin := $(patsubst %.cxx,%.so,$(IFDSPluginSrc))

all: run
castcheck: CastCheck.cxx CastCheck.h
	$(CXX) $(CXX_FLAGS) $(INCLUDE_DIRS) $(LLVM_FLAGS) $(IFDSPluginSrc) -o $(IFDSPlugin)

clean:
	rm -f $(IFDSPlugin)
	rm -f *.dot
	rm -f *.json

run: gobject-example.ll.conf castcheck
	phasar --config gobject-example.c.ll.conf
   #+END_SRC
