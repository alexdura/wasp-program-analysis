#+TITLE: The graph visualizer VERSION 2

Because emacs somehow wrote the wrong buffer in the previous version.

* What is this

This is a script that will take a ~results.json~ file as an input, and output a dot file.

Here is how to use the script: 
#+BEGIN_SRC bash
python results_visualizer.py results.json # Generates a dot file
dot -Tpdf results.dot # Generates a PDF for you.
#+END_SRC


* How does it work

First, it loads JSON from the results.json file, if provided.

#+NAME: load_json
#+BEGIN_SRC python :results output
import json
import sys

if sys.argv[0]:
    filename = sys.argv[0]
else:
    filename = "results.json"

f = open(filename)
json_data = json.load(f)
print("JSON_DATA", json_data)
#+END_SRC

#+RESULTS: load_json
: ('JSON_DATA', [{u'DataFlow': {u'main::%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2': {u'Facts': [[u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM']]}, u'main::store i32 0, i32* %1, align 4, !phasar.instruction.id !5, ID: 3': {u'Facts': [[u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM']]}, u'main::%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::%4 = load i32, i32* %2, align 4, !phasar.instruction.id !7, ID: 5': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::ret i32 %5, !phasar.instruction.id !10, ID: 8': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::store i32 0, i32* %2, align 4, !phasar.instruction.id !6, ID: 4': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::store i32 %4, i32* %3, align 4, !phasar.instruction.id !8, ID: 6': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1': {u'Facts': [[u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::%5 = load i32, i32* %3, align 4, !phasar.instruction.id !9, ID: 7': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}}}])

Then we extract the data from it, we are interested in the ~DataFlow~ data.

#+BEGIN_SRC python :noweb yes :results output
<<load_json>>
dataflow_data = [d for d in json_data if d["DataFlow"]][0]
print("DATAFLOW_DATA", dataflow_data)
#+END_SRC

#+RESULTS:
: ('JSON_DATA', [{u'DataFlow': {u'main::%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2': {u'Facts': [[u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM']]}, u'main::store i32 0, i32* %1, align 4, !phasar.instruction.id !5, ID: 3': {u'Facts': [[u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM']]}, u'main::%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::%4 = load i32, i32* %2, align 4, !phasar.instruction.id !7, ID: 5': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::ret i32 %5, !phasar.instruction.id !10, ID: 8': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::store i32 0, i32* %2, align 4, !phasar.instruction.id !6, ID: 4': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::store i32 %4, i32* %3, align 4, !phasar.instruction.id !8, ID: 6': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1': {u'Facts': [[u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::%5 = load i32, i32* %3, align 4, !phasar.instruction.id !9, ID: 7': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}}}])
: ('DATAFLOW_DATA', {u'DataFlow': {u'main::%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2': {u'Facts': [[u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM']]}, u'main::store i32 0, i32* %1, align 4, !phasar.instruction.id !5, ID: 3': {u'Facts': [[u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM']]}, u'main::%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::%4 = load i32, i32* %2, align 4, !phasar.instruction.id !7, ID: 5': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::ret i32 %5, !phasar.instruction.id !10, ID: 8': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::store i32 0, i32* %2, align 4, !phasar.instruction.id !6, ID: 4': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::store i32 %4, i32* %3, align 4, !phasar.instruction.id !8, ID: 6': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM'], [u'%3 = alloca i32, align 4, !phasar.instruction.id !4, ID: 2', u'BOTTOM']]}, u'main::%2 = alloca i32, align 4, !phasar.instruction.id !3, ID: 1': {u'Facts': [[u'%1 = alloca i32, align 4, !phasar.instruction.id !2, ID: 0', u'BOTTOM'], [u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}, u'main::%5 = load i32, i32* %3, align 4, !phasar.instruction.id !9, ID: 7': {u'Facts': [[u'@zero_value = constant i2 0, align 4, ID: -1', u'BOTTOM']]}}})

